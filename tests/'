import pytest
import sys
import os
import pdb
import re
import logging
import numpy as np
import pandas as pd
sys.path.append("..")
from parse import Settings, RegressionType, parse_data
from node import Model

logging.basicConfig(level=logging.CRITICAL)
logger = logging.getLogger('Test Logger')

# These tests scrape data from the GUIDE output and compare 

def parse_output_file_for_tree_text(data_dir, fname):
    """ Parse parts of GUIDE output so we can compare it.
        May strip this down to separate functions if they 
        are needed to test against.
    """
    SECT3 = "Regression tree:"
    SECT3END = "***********"
    with open(data_dir + fname) as f: 
        lines = f.readlines()
        tree_text = ""
        for idx, l in enumerate(lines):
            if l.strip().startswith(SECT3):
                index = idx
                end_index = -1
                start_found = False
                while (True):
                    if start_found == False and lines[index].strip().startswith("Node 1"):
                        idx = index
                        start_found = True
                    if lines[index].strip().startswith(SECT3END):
                        end_index = index 
                        break
                    index = index + 1
                # grab the tree text into a list
                tree_text = lines[idx:end_index-1]
                break

        return tree_text
        
@pytest.fixture(scope='session')
def tiny2(): 
    settings = Settings(
        data_dir="./data-tiniest2/",
        dsc_file="data.dsc",
        out_file="cons.out",
        model=RegressionType.LINEAR_PIECEWISE_CONSTANT,
        max_depth=3, min_samples_leaf=2)
    parse_data(settings=settings)
    model = Model(settings)
    model.fit()
    predictions = model.predict_train_data()
    return settings, model, predictions

@pytest.fixture(scope='session')
def strikes1(): 
    settings = Settings(
        data_dir="./data-strikes1/",
        dsc_file="data.dsc",
        out_file="cons.out",
        model=RegressionType.LINEAR_PIECEWISE_CONSTANT,
        input_file="cons.in")
    parse_data(settings=settings)
    model = Model(settings)
    model.fit()
    predictions = model.predict_train_data()
    return settings, model, predictions

@pytest.fixture(scope='session')
def strikes1_deep(): 
    settings = Settings(
        data_dir="./data-strikes1-deep/",
        dsc_file="data.dsc",
        out_file="cons.out",
        model=RegressionType.LINEAR_PIECEWISE_CONSTANT,
        input_file="cons.in")
    parse_data(settings=settings)
    model = Model(settings)
    model.fit()
    predictions = model.predict_train_data()
    return settings, model, predictions


@pytest.fixture(scope='session')
def strikes2(): 
    settings = Settings(
        data_dir="./data-strikes2/",
        dsc_file="data.dsc",
        out_file="cons.out",
        model=RegressionType.LINEAR_PIECEWISE_CONSTANT,
        input_file="cons.in")
    parse_data(settings=settings)
    model = Model(settings)
    model.fit()
    predictions = model.predict_train_data()
    return settings, model, predictions


def compare_predicted_vals(ref, this_prog):
    cutoff = 1E-3
    titles_match =  this_prog.columns == ref.columns 
    train_y_or_n_matches =  this_prog.train == ref.train 
    
    observed_differences =  np.abs(this_prog.observed - ref.observed)
    prediction_differences = np.abs(this_prog.predicted - ref.predicted)

    logger.log(logging.CRITICAL, msg = f"num cases match? {this_prog.shape[0] == ref.shape[0]} this_prog, ref = {this_prog.shape[0]},{ref.shape[0]}")
    logger.log(logging.CRITICAL, msg = f"train y or n matches? {train_y_or_n_matches}")
    logger.log(logging.CRITICAL, msg = f"num predicted differences > {cutoff}"
    f"max pred diff = {prediction_differences.max():.2g}"
    
    assert titles_match.all()
    assert train_y_or_n_matches.all() 
    assert (observed_differences < 1E-3).all()
    assert (prediction_differences < 1E-3).all()

def compare_trees(settings, our_model):
    ref_tree = parse_output_file_for_tree_text(data_dir=settings.data_dir, fname=_settings.out_file) 

    regex = r"""Node\s(\d*):\s(\S+)\s([<>=//])+(.*)"""
    for lr, lp in zip(ref_tree, our_model.tree_text):
        tup_r = re.findall(regex, lr)
        tup_p = re.findall(regex, lp)
        print(tup_r, 'cmp', tup_p)


def test_tiny2(tiny2):
    """ Compare predictions of fitted model on the training data to
    reference software output. 
    Case:   piecewise constant
            no weight var
            all numeric variables 
            no missing values
            no interaction test
    """
    _settings, _model, _predictions = tiny2
    reference = pd.read_csv(_settings.data_dir + "data.node", delim_whitespace=True)

    compare_predicted_vals(reference, _predictions)
